# Generated by Django 5.2.4 on 2025-08-27 08:28

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sylvia', '0005_delete_invoice'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CrossoverRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('crossover_id', models.CharField(editable=False, help_text='Auto-generated crossover identifier', max_length=50, unique=True)),
                ('requested_bags', models.PositiveIntegerField(help_text='Number of bags requested for crossover')),
                ('actual_transferred_bags', models.PositiveIntegerField(default=0, help_text='Actual bags transferred')),
                ('status', models.CharField(choices=[('REQUESTED', 'Crossover Requested'), ('APPROVED', 'Approved for Crossover'), ('IN_PROGRESS', 'Transfer in Progress'), ('COMPLETED', 'Transfer Completed'), ('CANCELLED', 'Cancelled')], default='REQUESTED', max_length=20)),
                ('requested_date', models.DateTimeField(auto_now_add=True, help_text='When crossover was requested')),
                ('approved_date', models.DateTimeField(blank=True, help_text='When crossover was approved', null=True)),
                ('transfer_start_time', models.DateTimeField(blank=True, help_text='When physical transfer started', null=True)),
                ('transfer_completion_time', models.DateTimeField(blank=True, help_text='When transfer was completed', null=True)),
                ('transferred_good_bags', models.PositiveIntegerField(default=0, help_text='Good condition bags transferred')),
                ('transferred_damaged_bags', models.PositiveIntegerField(default=0, help_text='Damaged bags transferred (if any)')),
                ('crossover_notes', models.TextField(blank=True, help_text='Notes about the crossover process')),
                ('approved_by', models.ForeignKey(blank=True, help_text='User who approved the crossover', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_crossovers', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_records', to=settings.AUTH_USER_MODEL)),
                ('destination_dealer', models.ForeignKey(help_text='Dealer receiving the crossover goods', on_delete=django.db.models.deletion.CASCADE, related_name='crossover_deliveries', to='sylvia.dealer')),
                ('destination_vehicle', models.ForeignKey(help_text='Destination vehicle receiving the goods', on_delete=django.db.models.deletion.CASCADE, related_name='crossover_destinations', to='sylvia.vehicle')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crossover_records', to='sylvia.product')),
                ('source_vehicle', models.ForeignKey(help_text='Source vehicle from which goods are transferred', on_delete=django.db.models.deletion.CASCADE, related_name='crossover_sources', to='sylvia.vehicle')),
                ('supervised_by', models.ForeignKey(blank=True, help_text='User who supervised the transfer', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supervised_crossovers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Crossover Record',
                'verbose_name_plural': 'Crossover Records',
                'ordering': ['-requested_date'],
            },
        ),
        migrations.CreateModel(
            name='DeliveryChallan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('challan_number', models.CharField(editable=False, help_text='Auto-generated delivery challan number', max_length=50, unique=True)),
                ('challan_type', models.CharField(choices=[('CROSSOVER', 'Crossover Delivery'), ('INDEPENDENT', 'Independent Loading'), ('MIXED', 'Mixed (Crossover + Loading)')], help_text='Type of delivery challan', max_length=15)),
                ('issue_date', models.DateTimeField(auto_now_add=True, help_text='When challan was issued')),
                ('actual_delivery_date', models.DateTimeField(blank=True, help_text='Actual delivery date and time', null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('IN_TRANSIT', 'In Transit'), ('DELIVERED', 'Delivered')], default='DRAFT', max_length=15)),
                ('total_bags', models.PositiveIntegerField(default=0, help_text='Total bags in this challan')),
                ('total_weight_mt', models.DecimalField(decimal_places=3, default=0, help_text='Total weight in metric tons', max_digits=10)),
                ('delivery_address', models.TextField(help_text='Complete delivery address')),
                ('special_instructions', models.TextField(blank=True, help_text='Special delivery instructions')),
                ('remarks', models.TextField(blank=True, help_text='General remarks about the delivery')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_records', to=settings.AUTH_USER_MODEL)),
                ('crossover_record', models.ForeignKey(blank=True, help_text='Linked crossover operation (if applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='delivery_challans', to='godown.crossoverrecord')),
                ('dealer', models.ForeignKey(help_text='Dealer receiving the goods', on_delete=django.db.models.deletion.CASCADE, related_name='delivery_challans', to='sylvia.dealer')),
                ('vehicle', models.ForeignKey(help_text='Delivery vehicle', on_delete=django.db.models.deletion.CASCADE, related_name='delivery_challans', to='sylvia.vehicle')),
            ],
            options={
                'verbose_name': 'Delivery Challan',
                'verbose_name_plural': 'Delivery Challans',
                'ordering': ['-issue_date'],
            },
        ),
        migrations.CreateModel(
            name='DeliveryChallanItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bags', models.PositiveIntegerField(help_text='Number of bags for this product')),
                ('weight_per_bag_kg', models.DecimalField(decimal_places=2, default=50.0, help_text='Weight per bag in kilograms', max_digits=6)),
                ('total_weight_mt', models.DecimalField(decimal_places=3, help_text='Total weight in metric tons for this line item', max_digits=10)),
                ('quality_notes', models.TextField(blank=True, help_text='Quality notes for this product line item')),
                ('challan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challan_items', to='godown.deliverychallan')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_records', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challan_items', to='sylvia.product')),
            ],
            options={
                'ordering': ['product__name'],
            },
        ),
        migrations.CreateModel(
            name='ChallanItemBatchMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bags_consumed', models.PositiveIntegerField(help_text='Number of bags consumed from this batch for this challan item')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_records', to=settings.AUTH_USER_MODEL)),
                ('challan_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_mappings', to='godown.deliverychallanitem')),
            ],
            options={
                'ordering': ['inventory_batch__received_date'],
            },
        ),
        migrations.CreateModel(
            name='GodownInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('batch_id', models.CharField(editable=False, help_text='Auto-generated FIFO batch identifier', max_length=50, unique=True)),
                ('received_date', models.DateTimeField(auto_now_add=True, help_text='Date when this batch was received and stored')),
                ('total_bags_received', models.PositiveIntegerField(help_text='Total bags in this batch when first stored')),
                ('good_bags_available', models.PositiveIntegerField(help_text='Current available good bags in this batch')),
                ('good_bags_reserved', models.PositiveIntegerField(default=0, help_text='Good bags reserved for pending loading requests')),
                ('damaged_bags', models.PositiveIntegerField(default=0, help_text='Damaged bags identified after storage')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active Stock'), ('RESERVED', 'Reserved for Loading'), ('ALLOCATED', 'Allocated to Order'), ('EXPIRED', 'Expired/Old Stock'), ('DAMAGED', 'Damaged Stock')], default='ACTIVE', max_length=20)),
                ('storage_location', models.CharField(blank=True, help_text='Specific location within godown (e.g., Section A, Row 5)', max_length=100)),
                ('quality_grade', models.CharField(choices=[('A', 'Grade A - Excellent'), ('B', 'Grade B - Good'), ('C', 'Grade C - Average'), ('D', 'Grade D - Below Average')], default='A', max_length=20)),
                ('manufacturing_date', models.DateField(blank=True, help_text='Manufacturing date of cement (if available)', null=True)),
                ('expiry_alert_date', models.DateField(blank=True, help_text='Date to alert for aging stock', null=True)),
                ('storage_notes', models.TextField(blank=True, help_text='Notes about storage conditions, quality observations')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_records', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_batches', to='sylvia.product')),
            ],
            options={
                'verbose_name': 'Godown Inventory Batch',
                'verbose_name_plural': 'Godown Inventory Batches',
                'ordering': ['received_date'],
            },
        ),
        migrations.AddField(
            model_name='deliverychallanitem',
            name='source_inventory_batches',
            field=models.ManyToManyField(help_text='Inventory batches used for this challan item', through='godown.ChallanItemBatchMapping', to='godown.godowninventory'),
        ),
        migrations.AddField(
            model_name='challanitembatchmapping',
            name='inventory_batch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challan_mappings', to='godown.godowninventory'),
        ),
        migrations.CreateModel(
            name='GodownLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the godown/warehouse', max_length=200)),
                ('code', models.CharField(help_text='Unique code for the godown', max_length=20, unique=True)),
                ('address', models.TextField(blank=True, help_text='Full address of the godown')),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('pincode', models.CharField(blank=True, max_length=10)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, help_text='GPS latitude coordinate', max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, help_text='GPS longitude coordinate', max_digits=10, null=True)),
                ('total_capacity', models.DecimalField(blank=True, decimal_places=2, help_text='Total storage capacity in cubic meters', max_digits=12, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_records', to=settings.AUTH_USER_MODEL)),
                ('manager', models.ForeignKey(blank=True, help_text='Manager of this godown', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_godowns', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Godown Location',
                'verbose_name_plural': 'Godown Locations',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='godowninventory',
            name='godown',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_batches', to='godown.godownlocation'),
        ),
        migrations.AddField(
            model_name='deliverychallan',
            name='godown',
            field=models.ForeignKey(help_text='Source godown', on_delete=django.db.models.deletion.CASCADE, related_name='delivery_challans', to='godown.godownlocation'),
        ),
        migrations.CreateModel(
            name='LoadingRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('loading_request_id', models.CharField(editable=False, help_text='Auto-generated loading request identifier', max_length=50, unique=True)),
                ('requested_bags', models.PositiveIntegerField(help_text='Number of bags requested for loading')),
                ('allocated_bags', models.PositiveIntegerField(default=0, help_text='Bags allocated from inventory (may be from multiple batches)')),
                ('loaded_bags', models.PositiveIntegerField(default=0, help_text='Actual bags loaded onto vehicle')),
                ('status', models.CharField(choices=[('REQUESTED', 'Loading Requested'), ('APPROVED', 'Approved for Loading'), ('INVENTORY_ALLOCATED', 'Inventory Allocated'), ('LOADING_IN_PROGRESS', 'Loading in Progress'), ('COMPLETED', 'Loading Completed'), ('CANCELLED', 'Cancelled')], default='REQUESTED', max_length=25)),
                ('priority', models.CharField(choices=[('LOW', 'Low Priority'), ('MEDIUM', 'Medium Priority'), ('HIGH', 'High Priority'), ('URGENT', 'Urgent')], default='MEDIUM', max_length=10)),
                ('requested_date', models.DateTimeField(auto_now_add=True, help_text='When loading was requested')),
                ('required_by_date', models.DateTimeField(help_text='When loading must be completed by')),
                ('approved_date', models.DateTimeField(blank=True, help_text='When request was approved', null=True)),
                ('loading_start_time', models.DateTimeField(blank=True, help_text='When loading process started', null=True)),
                ('loading_completion_time', models.DateTimeField(blank=True, help_text='When loading was completed', null=True)),
                ('special_instructions', models.TextField(blank=True, help_text='Special instructions for loading (handling, quality, etc.)')),
                ('loading_notes', models.TextField(blank=True, help_text='Notes about the loading process')),
                ('approved_by', models.ForeignKey(blank=True, help_text='User who approved the loading request', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_loadings', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_records', to=settings.AUTH_USER_MODEL)),
                ('dealer', models.ForeignKey(help_text='Dealer for whom loading is requested', on_delete=django.db.models.deletion.CASCADE, related_name='loading_requests', to='sylvia.dealer')),
                ('godown', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loading_requests', to='godown.godownlocation')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loading_requests', to='sylvia.product')),
                ('requested_by', models.ForeignKey(blank=True, help_text='User who made the loading request', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested_loadings', to=settings.AUTH_USER_MODEL)),
                ('supervised_by', models.ForeignKey(blank=True, help_text='User who supervised the loading', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supervised_loadings', to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(help_text='Vehicle to be loaded', on_delete=django.db.models.deletion.CASCADE, related_name='loading_requests', to='sylvia.vehicle')),
            ],
            options={
                'verbose_name': 'Loading Request',
                'verbose_name_plural': 'Loading Requests',
                'ordering': ['-requested_date'],
            },
        ),
        migrations.AddField(
            model_name='deliverychallan',
            name='loading_request',
            field=models.ForeignKey(blank=True, help_text='Linked loading request (if applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='delivery_challans', to='godown.loadingrequest'),
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notification_type', models.CharField(choices=[('DAMAGE_ALERT', 'Damage Alert'), ('SHORTAGE_ALERT', 'Shortage Alert'), ('EXCESS_ALERT', 'Excess Alert'), ('DELAY_ALERT', 'Delay Alert'), ('QUALITY_ALERT', 'Quality Alert'), ('INVENTORY_LOW', 'Low Inventory Alert'), ('CROSSOVER_URGENT', 'Urgent Crossover Required'), ('LOADING_DELAY', 'Loading Delay Alert'), ('VEHICLE_WAITING', 'Vehicle Waiting Alert')], help_text='Type of notification/alert', max_length=20)),
                ('severity', models.CharField(choices=[('INFO', 'Information'), ('WARNING', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], help_text='Severity level of the notification', max_length=10)),
                ('status', models.CharField(choices=[('SENT', 'Notification Sent'), ('ACKNOWLEDGED', 'Acknowledged'), ('RESOLVED', 'Issue Resolved'), ('DISMISSED', 'Dismissed'), ('FAILED', 'Failed to Send')], default='SENT', max_length=15)),
                ('title', models.CharField(help_text='Short title/summary of the notification', max_length=200)),
                ('message', models.TextField(help_text='Detailed notification message')),
                ('sent_at', models.DateTimeField(auto_now_add=True, help_text='When notification was sent')),
                ('acknowledged_at', models.DateTimeField(blank=True, help_text='When notification was acknowledged', null=True)),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When underlying issue was resolved', null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional structured data related to the notification')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_records', to=settings.AUTH_USER_MODEL)),
                ('crossover_record', models.ForeignKey(blank=True, help_text='Related crossover record (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='godown.crossoverrecord')),
                ('inventory_batch', models.ForeignKey(blank=True, help_text='Related inventory batch (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='godown.godowninventory')),
                ('loading_request', models.ForeignKey(blank=True, help_text='Related loading request (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='godown.loadingrequest')),
            ],
            options={
                'verbose_name': 'Notification Log',
                'verbose_name_plural': 'Notification Logs',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationRecipient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('delivery_status', models.CharField(choices=[('PENDING', 'Pending Delivery'), ('DELIVERED', 'Delivered'), ('READ', 'Read by Recipient'), ('ACKNOWLEDGED', 'Acknowledged'), ('FAILED', 'Delivery Failed')], default='PENDING', max_length=15)),
                ('delivered_at', models.DateTimeField(blank=True, help_text='When notification was delivered to user', null=True)),
                ('read_at', models.DateTimeField(blank=True, help_text='When user read the notification', null=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, help_text='When user acknowledged the notification', null=True)),
                ('delivery_channel', models.CharField(choices=[('EMAIL', 'Email'), ('SMS', 'SMS'), ('WHATSAPP', 'WhatsApp'), ('IN_APP', 'In-App Notification'), ('PUSH', 'Push Notification')], default='IN_APP', max_length=20)),
                ('delivery_address', models.CharField(blank=True, help_text='Email address, phone number, etc. used for delivery', max_length=200)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_records', to=settings.AUTH_USER_MODEL)),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipient_records', to='godown.notificationlog')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_receipts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='notificationlog',
            name='notified_users',
            field=models.ManyToManyField(help_text='Users who received this notification', through='godown.NotificationRecipient', through_fields=('notification', 'user'), to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='OrderInTransit',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dispatch_id', models.CharField(blank=True, help_text='Unique ID for the dispatch', max_length=50, primary_key=True, serialize=False)),
                ('eway_bill_number', models.CharField(help_text='E-way bill number for the shipment', max_length=15, unique=True)),
                ('transport_document_number', models.CharField(blank=True, help_text='Transport receipt/challan number', max_length=50)),
                ('actual_arrival_date', models.DateTimeField(blank=True, help_text='Actual arrival date and time', null=True)),
                ('status', models.CharField(choices=[('IN_TRANSIT', 'In Transit'), ('ARRIVED', 'Arrived at Godown'), ('CANCELLED', 'Cancelled')], default='IN_TRANSIT', max_length=20)),
                ('expected_total_bags', models.PositiveIntegerField(help_text='Total expected bags as per invoice/order')),
                ('actual_received_bags', models.PositiveIntegerField(default=0, help_text='Actual bags received after counting')),
                ('good_bags', models.PositiveIntegerField(default=0, help_text='Number of bags in good condition')),
                ('damaged_bags', models.PositiveIntegerField(default=0, help_text='Number of damaged bags')),
                ('shortage_bags', models.PositiveIntegerField(default=0, help_text='Number of bags short from expected quantity')),
                ('excess_bags', models.PositiveIntegerField(default=0, help_text='Number of excess bags beyond expected quantity')),
                ('crossover_required', models.BooleanField(default=False, help_text='Whether part of this shipment needs direct cross-over')),
                ('crossover_bags', models.PositiveIntegerField(default=0, help_text='Number of bags allocated for cross-over')),
                ('arrival_notes', models.TextField(blank=True, help_text='Notes about arrival condition, delays, etc.')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_records', to=settings.AUTH_USER_MODEL)),
                ('godown', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_orders', to='godown.godownlocation')),
            ],
            options={
                'verbose_name': 'Order in Transit',
                'verbose_name_plural': 'Orders in Transit',
            },
        ),
        migrations.AddField(
            model_name='notificationlog',
            name='order_in_transit',
            field=models.ForeignKey(blank=True, help_text='Related transit order (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='godown.orderintransit'),
        ),
        migrations.AddField(
            model_name='godowninventory',
            name='order_in_transit',
            field=models.ForeignKey(help_text='Source transit record for this inventory batch', on_delete=django.db.models.deletion.CASCADE, related_name='inventory_batches', to='godown.orderintransit'),
        ),
        migrations.AddField(
            model_name='crossoverrecord',
            name='source_order_transit',
            field=models.ForeignKey(help_text='Source transit order for crossover', on_delete=django.db.models.deletion.CASCADE, related_name='crossover_records', to='godown.orderintransit'),
        ),
        migrations.AlterUniqueTogether(
            name='deliverychallanitem',
            unique_together={('challan', 'product')},
        ),
        migrations.AlterUniqueTogether(
            name='challanitembatchmapping',
            unique_together={('challan_item', 'inventory_batch')},
        ),
        migrations.AddIndex(
            model_name='loadingrequest',
            index=models.Index(fields=['status', 'priority', 'required_by_date'], name='godown_load_status_393c8e_idx'),
        ),
        migrations.AddIndex(
            model_name='loadingrequest',
            index=models.Index(fields=['dealer', 'status'], name='godown_load_dealer__e23e82_idx'),
        ),
        migrations.AddIndex(
            model_name='loadingrequest',
            index=models.Index(fields=['godown', 'status'], name='godown_load_godown__3387c9_idx'),
        ),
        migrations.AddIndex(
            model_name='loadingrequest',
            index=models.Index(fields=['loading_request_id'], name='godown_load_loading_1ce847_idx'),
        ),
        migrations.AddIndex(
            model_name='deliverychallan',
            index=models.Index(fields=['status', 'issue_date'], name='godown_deli_status_415686_idx'),
        ),
        migrations.AddIndex(
            model_name='deliverychallan',
            index=models.Index(fields=['dealer', 'status'], name='godown_deli_dealer__1f10ff_idx'),
        ),
        migrations.AddIndex(
            model_name='deliverychallan',
            index=models.Index(fields=['challan_number'], name='godown_deli_challan_3ad686_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='notificationrecipient',
            unique_together={('notification', 'user')},
        ),
        migrations.AddIndex(
            model_name='orderintransit',
            index=models.Index(fields=['eway_bill_number'], name='godown_orde_eway_bi_ab5e3a_idx'),
        ),
        migrations.AddIndex(
            model_name='orderintransit',
            index=models.Index(fields=['status', 'actual_arrival_date'], name='godown_orde_status_a71596_idx'),
        ),
        migrations.AddIndex(
            model_name='orderintransit',
            index=models.Index(fields=['godown', 'status'], name='godown_orde_godown__3fe718_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationlog',
            index=models.Index(fields=['notification_type', 'severity', 'sent_at'], name='godown_noti_notific_181c5f_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationlog',
            index=models.Index(fields=['status', 'sent_at'], name='godown_noti_status_1cc8d6_idx'),
        ),
        migrations.AddIndex(
            model_name='godowninventory',
            index=models.Index(fields=['godown', 'product', 'received_date'], name='godown_godo_godown__fdd8d7_idx'),
        ),
        migrations.AddIndex(
            model_name='godowninventory',
            index=models.Index(fields=['status', 'received_date'], name='godown_godo_status_704c95_idx'),
        ),
        migrations.AddIndex(
            model_name='godowninventory',
            index=models.Index(fields=['batch_id'], name='godown_godo_batch_i_063699_idx'),
        ),
        migrations.AddIndex(
            model_name='crossoverrecord',
            index=models.Index(fields=['status', 'requested_date'], name='godown_cros_status_a3fb54_idx'),
        ),
        migrations.AddIndex(
            model_name='crossoverrecord',
            index=models.Index(fields=['destination_dealer', 'status'], name='godown_cros_destina_a8388c_idx'),
        ),
        migrations.AddIndex(
            model_name='crossoverrecord',
            index=models.Index(fields=['crossover_id'], name='godown_cros_crossov_7bb31d_idx'),
        ),
    ]
