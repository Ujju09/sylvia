# Generated by Django 5.2.4 on 2025-08-29 02:23

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('godown', '0004_alter_loadingrequest_options_and_more'),
        ('sylvia', '0005_delete_invoice'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GodownDailyBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('balance_date', models.DateField(help_text='Date for which this balance is calculated')),
                ('opening_balance', models.IntegerField(default=0, help_text='Opening balance at start of day')),
                ('total_inward', models.PositiveIntegerField(default=0, help_text='Total inward movements during the day')),
                ('total_outward', models.PositiveIntegerField(default=0, help_text='Total outward movements during the day')),
                ('closing_balance', models.IntegerField(help_text='Calculated closing balance (opening + inward - outward)')),
                ('physical_count', models.PositiveIntegerField(blank=True, help_text='Actual physical count (if verification was done)', null=True)),
                ('count_verification_date', models.DateTimeField(blank=True, help_text='When physical verification was conducted', null=True)),
                ('balance_status', models.CharField(choices=[('CALCULATED', 'System Calculated'), ('VERIFIED', 'Manually Verified'), ('DISCREPANCY', 'Discrepancy Identified'), ('ADJUSTED', 'Balance Adjusted')], default='CALCULATED', max_length=15)),
                ('variance_quantity', models.IntegerField(default=0, help_text='Difference between calculated and physical count (+ = excess, - = shortage)')),
                ('active_batches_count', models.PositiveIntegerField(default=0, help_text='Number of active inventory batches')),
                ('oldest_batch_age_days', models.PositiveIntegerField(blank=True, help_text='Age of oldest active batch in days', null=True)),
                ('good_condition_bags', models.PositiveIntegerField(default=0, help_text='Bags in good condition')),
                ('damaged_bags', models.PositiveIntegerField(default=0, help_text='Damaged bags count')),
                ('expired_bags', models.PositiveIntegerField(default=0, help_text='Expired/aged bags count')),
                ('calculation_timestamp', models.DateTimeField(auto_now_add=True, help_text='When this balance was calculated')),
                ('last_transaction_id', models.CharField(blank=True, help_text='Last transaction ID included in this calculation', max_length=50)),
                ('is_auto_calculated', models.BooleanField(default=True, help_text='Whether this balance was auto-calculated by system')),
                ('verification_notes', models.TextField(blank=True, help_text='Notes from physical verification or balance review')),
                ('discrepancy_reason', models.TextField(blank=True, help_text='Reason for discrepancy (if identified)')),
                ('count_verified_by', models.ForeignKey(blank=True, help_text='User who conducted physical verification', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_balances', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_records', to=settings.AUTH_USER_MODEL)),
                ('godown', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_balances', to='godown.godownlocation')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_balances', to='sylvia.product')),
            ],
            options={
                'verbose_name': 'Godown Daily Balance',
                'verbose_name_plural': 'Godown Daily Balances',
                'ordering': ['-balance_date', 'godown__name', 'product__name'],
            },
        ),
        migrations.CreateModel(
            name='GodownInventoryLedger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('transaction_id', models.CharField(editable=False, help_text='Auto-generated unique transaction identifier', max_length=50, unique=True)),
                ('transaction_type', models.CharField(choices=[('INWARD_RECEIPT', 'Stock Receipt from Transit'), ('INWARD_ADJUSTMENT', 'Manual Stock Addition'), ('INWARD_RETURN', 'Returned Stock'), ('INWARD_OPENING', 'Opening Balance Entry'), ('OUTWARD_LOADING', 'Loading Request Fulfillment'), ('OUTWARD_CROSSOVER', 'Crossover Transfer'), ('OUTWARD_DAMAGE', 'Damage/Waste Writeoff'), ('OUTWARD_ADJUSTMENT', 'Manual Stock Reduction'), ('OUTWARD_CLOSING', 'Closing Balance Entry'), ('BALANCE_ADJUSTMENT', 'System Balance Correction')], help_text='Type of inventory transaction', max_length=20)),
                ('transaction_date', models.DateTimeField(default=django.utils.timezone.now, help_text='When the transaction occurred')),
                ('entry_status', models.CharField(choices=[('PENDING', 'Pending Confirmation'), ('CONFIRMED', 'Confirmed Entry'), ('CANCELLED', 'Cancelled Entry'), ('SYSTEM_GENERATED', 'System Generated')], default='PENDING', max_length=20)),
                ('inward_quantity', models.PositiveIntegerField(default=0, help_text='Bags added to inventory (positive quantity)')),
                ('outward_quantity', models.PositiveIntegerField(default=0, help_text='Bags removed from inventory (positive quantity)')),
                ('balance_after_transaction', models.IntegerField(help_text='Calculated balance after this transaction')),
                ('quality_notes', models.TextField(blank=True, help_text='Quality observations or notes about the stock')),
                ('condition_at_transaction', models.CharField(choices=[('GOOD', 'Good Condition'), ('DAMAGED', 'Damaged'), ('EXPIRED', 'Expired/Old'), ('MIXED', 'Mixed Condition')], default='GOOD', max_length=20)),
                ('approval_required', models.BooleanField(default=False, help_text='Whether this transaction requires approval')),
                ('approved_at', models.DateTimeField(blank=True, help_text='When transaction was approved', null=True)),
                ('reference_document', models.CharField(blank=True, help_text='Reference document number (challan, receipt, etc.)', max_length=100)),
                ('transaction_notes', models.TextField(blank=True, help_text='Detailed notes about this transaction')),
                ('is_system_generated', models.BooleanField(default=False, help_text='Whether this entry was auto-generated by the system')),
                ('authorized_by', models.ForeignKey(blank=True, help_text='User who authorized this transaction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authorized_ledger_entries', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_records', to=settings.AUTH_USER_MODEL)),
                ('godown', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ledger_entries', to='godown.godownlocation')),
                ('parent_transaction', models.ForeignKey(blank=True, help_text='Parent transaction (for adjustment entries)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='godown.godowninventoryledger')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ledger_entries', to='sylvia.product')),
                ('source_challan', models.ForeignKey(blank=True, help_text='Source delivery challan', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ledger_entries', to='godown.deliverychallan')),
                ('source_crossover', models.ForeignKey(blank=True, help_text='Source crossover record (for OUTWARD_CROSSOVER)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ledger_entries', to='godown.crossoverrecord')),
                ('source_loading_request', models.ForeignKey(blank=True, help_text='Source loading request (for OUTWARD_LOADING)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ledger_entries', to='godown.loadingrequest')),
                ('source_order_transit', models.ForeignKey(blank=True, help_text='Source transit order (for INWARD_RECEIPT)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ledger_entries', to='godown.orderintransit')),
            ],
            options={
                'verbose_name': 'Godown Inventory Ledger Entry',
                'verbose_name_plural': 'Godown Inventory Ledger Entries',
                'ordering': ['-transaction_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InventoryVariance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('variance_id', models.CharField(editable=False, help_text='Auto-generated variance identifier', max_length=50, unique=True)),
                ('variance_type', models.CharField(choices=[('SHORTAGE', 'Stock Shortage'), ('EXCESS', 'Excess Stock'), ('QUALITY_ISSUE', 'Quality Degradation'), ('SYSTEM_ERROR', 'System Calculation Error'), ('THEFT_SUSPECTED', 'Suspected Theft'), ('DAMAGE_UNREPORTED', 'Unreported Damage'), ('COUNTING_ERROR', 'Physical Counting Error'), ('DATA_ENTRY_ERROR', 'Data Entry Mistake')], max_length=20)),
                ('variance_date', models.DateField(help_text='Date when variance was first identified')),
                ('expected_quantity', models.PositiveIntegerField(help_text='Expected/calculated quantity')),
                ('actual_quantity', models.PositiveIntegerField(help_text='Actual/physical quantity found')),
                ('variance_quantity', models.IntegerField(help_text='Difference (actual - expected)')),
                ('estimated_value_impact', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated financial value of variance', max_digits=12, null=True)),
                ('status', models.CharField(choices=[('IDENTIFIED', 'Variance Identified'), ('INVESTIGATING', 'Under Investigation'), ('ROOT_CAUSE_FOUND', 'Root Cause Identified'), ('RESOLVED', 'Resolved'), ('WRITTEN_OFF', 'Written Off'), ('DISMISSED', 'Dismissed as Non-Issue')], default='IDENTIFIED', max_length=20)),
                ('priority_level', models.CharField(choices=[('LOW', 'Low Priority'), ('MEDIUM', 'Medium Priority'), ('HIGH', 'High Priority'), ('CRITICAL', 'Critical - Immediate Action Required')], default='MEDIUM', max_length=10)),
                ('investigation_started_at', models.DateTimeField(blank=True, help_text='When investigation was started', null=True)),
                ('investigation_notes', models.TextField(blank=True, help_text='Detailed investigation findings and notes')),
                ('root_cause', models.TextField(blank=True, help_text='Identified root cause of the variance')),
                ('root_cause_identified_at', models.DateTimeField(blank=True, help_text='When root cause was identified', null=True)),
                ('resolution_action', models.TextField(blank=True, help_text='Action taken to resolve the variance')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When variance was resolved', null=True)),
                ('preventive_measures', models.TextField(blank=True, help_text='Measures implemented to prevent similar variances')),
                ('escalated_at', models.DateTimeField(blank=True, help_text='When variance was escalated', null=True)),
                ('adjustment_ledger_entry', models.ForeignKey(blank=True, help_text='Ledger entry created to adjust for this variance', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='variance_adjustments', to='godown.godowninventoryledger')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_records', to=settings.AUTH_USER_MODEL)),
                ('escalated_to', models.ForeignKey(blank=True, help_text='User to whom variance was escalated', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='escalated_variances', to=settings.AUTH_USER_MODEL)),
                ('godown', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_variances', to='godown.godownlocation')),
                ('investigated_by', models.ForeignKey(blank=True, help_text='User conducting the investigation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='investigated_variances', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_variances', to='sylvia.product')),
                ('related_daily_balance', models.ForeignKey(blank=True, help_text='Daily balance record that identified this variance', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='variances', to='godown.godowndailybalance')),
                ('resolved_by', models.ForeignKey(blank=True, help_text='User who resolved the variance', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_variances', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Inventory Variance',
                'verbose_name_plural': 'Inventory Variances',
                'ordering': ['-variance_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LedgerBatchMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quantity_affected', models.PositiveIntegerField(help_text='Number of bags affected in this batch for this transaction')),
                ('batch_balance_before', models.PositiveIntegerField(help_text='Batch balance before this transaction')),
                ('batch_balance_after', models.PositiveIntegerField(help_text='Batch balance after this transaction')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_records', to=settings.AUTH_USER_MODEL)),
                ('inventory_batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ledger_mappings', to='godown.godowninventory')),
                ('ledger_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_mappings', to='godown.godowninventoryledger')),
            ],
            options={
                'ordering': ['inventory_batch__received_date'],
            },
        ),
        migrations.AddField(
            model_name='godowninventoryledger',
            name='affected_inventory_batches',
            field=models.ManyToManyField(help_text='Inventory batches affected by this transaction', through='godown.LedgerBatchMapping', to='godown.godowninventory'),
        ),
        migrations.AddIndex(
            model_name='godowndailybalance',
            index=models.Index(fields=['balance_date', 'godown', 'product'], name='godown_godo_balance_5aaebc_idx'),
        ),
        migrations.AddIndex(
            model_name='godowndailybalance',
            index=models.Index(fields=['godown', 'product', '-balance_date'], name='godown_godo_godown__f43c75_idx'),
        ),
        migrations.AddIndex(
            model_name='godowndailybalance',
            index=models.Index(fields=['balance_status', '-balance_date'], name='godown_godo_balance_ce6eee_idx'),
        ),
        migrations.AddIndex(
            model_name='godowndailybalance',
            index=models.Index(fields=['-balance_date'], name='godown_godo_balance_df197c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='godowndailybalance',
            unique_together={('balance_date', 'godown', 'product')},
        ),
        migrations.AddIndex(
            model_name='inventoryvariance',
            index=models.Index(fields=['variance_id'], name='godown_inve_varianc_e6f006_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryvariance',
            index=models.Index(fields=['godown', 'product', '-variance_date'], name='godown_inve_godown__14b9a3_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryvariance',
            index=models.Index(fields=['status', 'priority_level', '-variance_date'], name='godown_inve_status_82bab7_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryvariance',
            index=models.Index(fields=['variance_type', '-variance_date'], name='godown_inve_varianc_7c4d13_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryvariance',
            index=models.Index(fields=['-variance_date'], name='godown_inve_varianc_96bb0d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='ledgerbatchmapping',
            unique_together={('ledger_entry', 'inventory_batch')},
        ),
        migrations.AddIndex(
            model_name='godowninventoryledger',
            index=models.Index(fields=['godown', 'product', '-transaction_date'], name='godown_godo_godown__33c32f_idx'),
        ),
        migrations.AddIndex(
            model_name='godowninventoryledger',
            index=models.Index(fields=['transaction_type', '-transaction_date'], name='godown_godo_transac_989246_idx'),
        ),
        migrations.AddIndex(
            model_name='godowninventoryledger',
            index=models.Index(fields=['entry_status', '-transaction_date'], name='godown_godo_entry_s_188768_idx'),
        ),
        migrations.AddIndex(
            model_name='godowninventoryledger',
            index=models.Index(fields=['transaction_id'], name='godown_godo_transac_c8ba26_idx'),
        ),
        migrations.AddIndex(
            model_name='godowninventoryledger',
            index=models.Index(fields=['is_system_generated', '-transaction_date'], name='godown_godo_is_syst_4df127_idx'),
        ),
    ]
